schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    getUsers: [User!]! @aws_lambda
    getAlerts: [GeniaTrendsAlert!]! @aws_lambda
}

type Mutation {
    addUser(input: UserInput!): User! @aws_api_key @aws_subscribe(mutations: ["addUser"])
    login(input: SessionInput!): Session! @aws_api_key
    answers(input: ChatInput!): Answers! @aws_lambda
}

type Subscription {
    onAddUser: User @aws_api_key @aws_subscribe(mutations: ["addUser"])
}

type GeniaTrendsAlert @aws_api_key @aws_lambda {
    id: ID
    dtRef: String
    advertiser: String
    city: String
    createdAt: String
    message: String
    speed: String
    type: String
}

type User @aws_api_key @aws_lambda {
    id: ID!
    name: String!
    email: String!
    active: Boolean!
    isAdmin: Boolean!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
}

type Session @aws_api_key {
    token: String!
    user: User!
}

type Reasoning {
    action: String!
    observation: String!
}

type Answers {
    query: String!
    response: String!
    reasoning: [Reasoning!]!
}

input SessionInput  {
    email: String!
    password: String!
}

input UserInput {
    name: String!
    email: String!
    password: String!
}

input ChatInput {
    query: String!
    sessionId: String!
}
