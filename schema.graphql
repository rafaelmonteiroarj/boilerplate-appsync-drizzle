schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    getUsers: [User!]! @aws_lambda
}

type Mutation {
    addUser(input: UserInput!): User! @aws_api_key @aws_subscribe(mutations: ["addUser"])
    login(input: SessionInput!): Session! @aws_api_key
    addGeniaTrendsAlert(id: ID!, dtRef: String!): GeniaTrendsAlert
}

type Subscription {
    onAddUser: User @aws_api_key @aws_subscribe(mutations: ["addUser"])
    onGeniaTrendsAlertAdded: GeniaTrendsAlert
    @aws_api_key @aws_subscribe(mutations: ["addGeniaTrendsAlert"])
}

type GeniaTrendsAlert @aws_api_key {
    id: ID!
    dtRef: String!
    advertiser: String!
    city: String!
    createdAt: AWSDateTime!
    message: String!
    speed: String!
    type: String!
}

type User @aws_api_key @aws_lambda {
    id: ID!
    name: String!
    email: String!
    active: Boolean!
    isAdmin: Boolean!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
}

type Session @aws_api_key {
    token: String!
    user: User!
}

input SessionInput  {
    email: String!
    password: String!
}

input UserInput {
    name: String!
    email: String!
    password: String!
}
